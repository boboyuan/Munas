[general]

BlockArchitecture = ClassificationBlockArchitecture
ClassCount = 10

Verbose = True
Multithreaded = True
# Set the number of threads to be used, 0 does not set a limit, -1 sets the number to the number presented
# by the CPU to the OS
ThreadCount = 8
GPU = False
Log = True

[evolution]

CrossoverProbability = 0.5
MutationProbability = 0.1
PopulationSize = 20
GenerationCount = 10

[output]

FigureTitle = Goal Attainment
SaveIndividuals = True
OutputPrefix = demo

# How often should the generations be visualized
GenerationGap = 1

# Saving individuals can be done, EVERY generation or at a specified INTERVAL, the final generation is always saved
GenerationSave = EVERY
GenerationSaveInterval = 1

[goals]

# In a goal vector array the normalization vector or goal vector can be varied to create the array, if set to True
# the goal vector will be varied, otherwise the normalization vector will be varied
VariableGoal = True

GoalVectorStart = 10000
# Inclusive end value
GoalVectorEnd = 50000
GoalVectorSteps = 6

NormalizationVector = (1000, 0.1)

; VariableGoal = False
;
; NormalizationVectorStart = 1000
; NormalizationVectorEnd = 2000
; NormalizationVectorSteps = 1
;
; GoalVector = (40000, 100)

[filter]

FilterFunction = MinMaxArray
FilterFunctionModule = TensorNAS.FilterFunctions.MinMax

# The multi-objective optimization requires that every objective has a weight that signifies if it should be
# minimized or maximized, as such the weights can be set to be all 'maximized', all 'minimize' or manually set,
# eg. -1, 1, -1

Weights = minimize

[tensorflow]

TrainingSampleSize = 2000
TestSampleSize = 1000
Optimizer = adam
Loss = sparse_categorical_crossentropy
Metrics = accuracy
BatchSize = 100
Epochs = 10
QuantizationAware = False